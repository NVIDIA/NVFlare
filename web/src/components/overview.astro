---
const features = [
  {
    id: "research",
    title: "Research & Productivity",
    icon: `<svg class="stroke-nvidia mt-2 ml-4 w-10 h-10 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
      <path stroke="" stroke-linecap="round" stroke-width="2" d="M8.737 8.737a21.49 21.49 0 0 1 3.308-2.724m0 0c3.063-2.026 5.99-2.641 7.331-1.3 1.827 1.828.026 6.591-4.023 10.64-4.049 4.049-8.812 5.85-10.64 4.023-1.33-1.33-.736-4.218 1.249-7.253m6.083-6.11c-3.063-2.026-5.99-2.641-7.331-1.3-1.827 1.828-.026 6.591 4.023 10.64m3.308-9.34a21.497 21.497 0 0 1 3.308 2.724m2.775 3.386c1.985 3.035 2.579 5.923 1.248 7.253-1.336 1.337-4.245.732-7.295-1.275M14 12a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z"/>
    </svg>
    `,
    description:
      "Provides user-friendly APIs for client and server programming. Use the Simulator and POC modes to quickly simulate a federated learning application.",
    link:"/NVFlare/research",
  },
  {
    id: "framework-agnostic",
    title: "Framework Agnostic",
    icon: `<svg class="stroke-nvidia mt-2 ml-4 w-10 h-10 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m8 8-4 4 4 4m8 0 4-4-4-4m-2-3-4 14"/>
    </svg>
    `,
    description:
      "Designed as a federated computing platform agnostic to frameworks, workloads, datasets, and domains. Federated learning apps are built on this foundation.",
    link: "/NVFlare/catalog",
  },
  {
    id: "open-arch",
    title: "Open Architecture Design",
    icon: `<svg class="stroke-nvidia mt-2 ml-4 w-10 h-10 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
      <path stroke="" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 8v8m0-8a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm0 8a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm6-2a2 2 0 1 1 4 0 2 2 0 0 1-4 0Zm0 0h-1a5 5 0 0 1-5-5v-.5"/>
    </svg>
    `,
    description:
      "Flexible open architecture allows for extensive customization, with a modular design that ensures each layer can be easily pluggable with custom components.",
    link: "https://nvflare.readthedocs.io/en/main/flare_overview.html#high-level-system-architecture",
  },
  {
    id: "security",
    title: "Security & Privacy",
    icon: `<svg class="stroke-nvidia mt-2 ml-4 w-10 h-10 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
      <path stroke="" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 14v3m-3-6V7a3 3 0 1 1 6 0v4m-8 0h10a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1v-7a1 1 0 0 1 1-1Z"/>
    </svg>
    `,
    description:
      "Prioritizes security with secure provisioning, event-based security plugins, authorization control, data filtering, audit logs, and advanced privacy-preserving algorithms.",
    link: "https://nvflare.readthedocs.io/en/main/user_guide/nvflare_security.html",
  },
  {
    id: "integration",
    title: "Easy Integration",
    icon: `<svg class="stroke-nvidia mt-2 ml-4 w-10 h-10 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
      <path stroke="" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h3a3 3 0 0 0 0-6h-.025a5.56 5.56 0 0 0 .025-.5A5.5 5.5 0 0 0 7.207 9.021C7.137 9.017 7.071 9 7 9a4 4 0 1 0 0 8h2.167M12 19v-9m0 0-2 2m2-2 2 2"/>
    </svg>
    `,
    description:
      "Enables a seamless integration with 3rd-party systems with the FLARE agent, and supports deployment for both on-premise and cloud with various complementary tools.",
    link: "https://nvflare.readthedocs.io/en/main/programming_guide/execution_api_type/3rd_party_integration.html#rd-party-integration",
  },
  {
    id: "production",
    title: "Production Grade",
    icon: `<svg class="stroke-nvidia mt-2 ml-4 w-10 h-10 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
      <path stroke="" stroke-linecap="round" stroke-width="2" d="M4.37 7.657c2.063.528 2.396 2.806 3.202 3.87 1.07 1.413 2.075 1.228 3.192 2.644 1.805 2.289 1.312 5.705 1.312 6.705M20 15h-1a4 4 0 0 0-4 4v1M8.587 3.992c0 .822.112 1.886 1.515 2.58 1.402.693 2.918.351 2.918 2.334 0 .276 0 2.008 1.972 2.008 2.026.031 2.026-1.678 2.026-2.008 0-.65.527-.9 1.177-.9H20M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"/>
    </svg>
    `,
    description:
      "Designed for robust, production-scale deployment in real-world federated learning scenarios. Successfully used in industries such as healthcare and financial services.",
    link: "https://nvflare.readthedocs.io/en/main/real_world_fl.html",
  },
];

---

<div class="bg-white py-20 sm:py-24">
  <div class="mx-auto max-w-7xl px-6 lg:px-8">
    <div class="mx-auto lg:mx-0 text-center">
      <h2 class="text-4xl lg:text-5xl font-bold lg:tracking-tight text-gray-900">
        Why FLARE?
      </h2>
    </div>

    <div class="mx-auto mt-8 grid max-w-2xl grid-cols-1 gap-x-8 gap-y-16 border-slate-400 pt-10 sm:pt-16 lg:mx-0 lg:max-w-none lg:grid-cols-3">
      {
        features.map((item) => (
          <div
            class={`flex gap-4 items-start divide-gray-200 bg-white shadow-md`}>
            <div>
              <div class="flex flex-wrap">
                <div id={item.id}></div>
                <h3 class="font-semibold text-md px-4 pt-3 text-lg">
                  {item.title}
                </h3>
              </div>
              <p class="text-slate-500 mt-2 leading-relaxed px-4 pb-2">
                {item.description}
              </p>
              <div class="flex justify-center border-t border-gray-200">
                <a
                  href={item.link}
                  class="items-center justify-center rounded-bl-lg border border-transparent py-4 text-sm font-semibold text-gray-900">
                  Read More
                </a>
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</div>

<script define:vars={{features}} is:inline>

  features.forEach((feature) => {
    const icon_wrapper = document.getElementById(feature.id);
    const icon = document.createElement(`svg`);
    icon.innerHTML = feature.icon;
    icon_wrapper.appendChild(icon)
  });

</script>