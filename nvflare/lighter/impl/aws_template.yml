aws_start_sh: |
  VM_NAME=nvflare_{~~type~~}
  SECURITY_GROUP=nvflare_{~~type~~}_sg_$RANDOM
  DEST_FOLDER=/var/tmp/cloud
  KEY_PAIR=NVFlare{~~type~~}KeyPair
  KEY_FILE=${KEY_PAIR}.pem

  echo "This script requires aws (AWS CLI), sshpass, dig and jq.  Now checking if they are installed."

  check_binary aws "Please see https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html on how to install it on your system."
  check_binary sshpass "Please install it first."
  check_binary dig "Please install it first."
  check_binary jq "Please install it first."

  if [ -z ${image_name+x} ]
  then
      container=false
  else
      container=true
  fi

  if [ $container = true ]
  then
    AMI_IMAGE=ami-06b8d5099f3a8d79d
    EC2_TYPE=t2.xlarge
    REGION=us-west-2
  else
    AMI_IMAGE=ami-04bad3c587fe60d89
    EC2_TYPE=t2.small
    REGION=us-west-2
  fi

  if [ -z ${config_file+x} ]
  then
      useDefault=true
  else
      useDefault=false
      . $config_file
      report_status "$?" "Loading config file"
  fi


  if [ $useDefault = true ]
  then
    while true
    do
      prompt AMI_IMAGE "Cloud AMI image, press ENTER to accept default ${AMI_IMAGE}: "
      prompt EC2_TYPE "Cloud EC2 type, press ENTER to accept default ${EC2_TYPE}: "
      prompt REGIION "Cloud EC2 region, press ENTER to accept default ${REGION}: "
      prompt ans "region = ${REGION}, ami image = ${AMI_IMAGE}, EC2 type = ${EC2_TYPE}, OK? (Y/n) "
      if [[ $ans = "" ]] || [[ $ans =~ ^(y|Y)$ ]]
      then
        break
      fi
    done
  fi

  if [ $container = false ]
  then
    echo "If the {~~type~~} requires additional dependencies, please copy the requirements.txt to ${DIR}."
    prompt ans "Press ENTER when it's done or no additional dependencies. "
  fi

  cd $DIR/..
  # Generate key pair

  echo "Generating key pair for VM"

  aws ec2 delete-key-pair --key-name $KEY_PAIR > /dev/null 2>&1
  rm -rf $KEY_FILE
  aws ec2 create-key-pair --key-name $KEY_PAIR --query 'KeyMaterial' --output text > $KEY_FILE
  report_status "$?" "creating key pair"
  chmod 400 $KEY_FILE

  # Generate Security Group
  # Try not reusing existing security group because we have to modify it for our own need.
  sg_id=$(aws ec2 create-security-group --group-name $SECURITY_GROUP --description "NVFlare security group" | jq -r .GroupId)
  report_status "$?" "creating security group"
  my_public_ip=$(dig +short myip.opendns.com @resolver1.opendns.com)
  if [ "$?" -eq 0 ] && [[ "$my_public_ip" =~ ^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$ ]]
  then
    aws ec2 authorize-security-group-ingress --group-id $sg_id --protocol tcp --port 22 --cidr ${my_public_ip}/32 > /tmp/sec_grp.log
  else
    echo "getting my public IP failed, please manually configure the inbound rule to limit SSH access"
    aws ec2 authorize-security-group-ingress --group-id $sg_id --protocol tcp --port 22 --cidr 0.0.0.0/0 > /tmp/sec_grp.log
  fi
  {~~inbound_rule~~}
  report_status "$?" "creating security group rules"

  # Start provisioning

  echo "Creating VM at region $REGION, may take a few minutes."

  aws ec2 run-instances --region $REGION --image-id $AMI_IMAGE --count 1 --instance-type $EC2_TYPE --key-name $KEY_PAIR --security-group-ids $sg_id > vm_create.json
  report_status "$?" "creating VM"
  instance_id=$(jq -r .Instances[0].InstanceId vm_create.json)

  aws ec2 wait instance-status-ok --instance-ids $instance_id
  aws ec2 describe-instances --instance-ids $instance_id > vm_result.json

  IP_ADDRESS=$(jq -r .Reservations[0].Instances[0].PublicIpAddress vm_result.json)

  echo "VM created with IP address: ${IP_ADDRESS}"

  echo "Copying files to $VM_NAME"
  DEST_SITE=ubuntu@${IP_ADDRESS}
  DEST=${DEST_SITE}:${DEST_FOLDER}
  echo "Destination folder is ${DEST}"
  scp -q -i $KEY_FILE -r -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $PWD $DEST
  report_status "$?" "copying startup kits to VM"

  if [ $container = true ]
  then
    echo "Launching container with docker option ${DOCKER_OPTION}."
    ssh -f -i $KEY_FILE -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${DEST_SITE} \
    "docker run -d -v ${DEST_FOLDER}:${DEST_FOLDER} --network host ${DOCKER_OPTION} ${image_name} \
    /bin/bash -c \"python -u -m nvflare.private.fed.app.{~~type~~}.{~~type~~}_train -m ${DEST_FOLDER} \
    -s fed_{~~type~~}.json --set {~~cln_uid~~} secure_train=true config_folder=config org={~~ORG~~} \" " > /tmp/nvflare.log 2>&1 
    report_status "$?" "launching container"
  else
    echo "Installing packages in $VM_NAME, may take a few minutes."
    ssh -f -i $KEY_FILE -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${DEST_SITE} \
    "pwd && wget -q https://bootstrap.pypa.io/get-pip.py && \
    python3 get-pip.py && python3 -m pip install nvflare && \
    touch ${DEST_FOLDER}/startup/requirements.txt && \
    python3 -m pip install -r ${DEST_FOLDER}/startup/requirements.txt && \
    nohup ${DEST_FOLDER}/startup/start.sh && sleep 20 && \
    exit" > /tmp/nvflare.log 2>&1 
    report_status "$?" "installing packages"
  fi

  echo "System was provisioned"
  echo "To terminate the EC2 instance, run the following command."
  echo "aws ec2 terminate-instances --instance-ids ${instance_id}"
  echo "Other resources provisioned"
  echo "security group: ${SECURITY_GROUP}"
  echo "key pair: ${KEY_PAIR}"

aws_start_dsb_sh: |
  VM_NAME=nvflare_dashboard
  AMI_IMAGE=ami-04bad3c587fe60d89
  EC2_TYPE=t2.small
  SECURITY_GROUP=nvflare_dashboard_sg_$RANDOM
  REGION=us-west-2
  ADMIN_USERNAME=ubuntu
  DEST_FOLDER=/home/${ADMIN_USERNAME}
  KEY_PAIR=NVFlareDashboardKeyPair
  KEY_FILE=${KEY_PAIR}.pem
  
  echo "This script requires aws (AWS CLI), sshpass, dig and jq.  Now checking if they are installed."

  check_binary aws "Please see https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html on how to install it on your system."
  check_binary sshpass "Please install it first."
  check_binary dig "Please install it first."
  check_binary jq "Please install it first."

  echo "One initial user will be created when starting dashboard."
  echo "Please enter the email address for this user."
  read email
  credential="${email}:$RANDOM"

  # Generate key pair

  echo "Generating key pair for VM"

  aws ec2 delete-key-pair --key-name $KEY_PAIR > /dev/null 2>&1
  rm -rf $KEY_FILE
  aws ec2 create-key-pair --key-name $KEY_PAIR --query 'KeyMaterial' --output text > $KEY_FILE
  report_status "$?" "creating key pair"
  chmod 400 $KEY_FILE

  # Generate Security Group

  sg_id=$(aws ec2 create-security-group --group-name $SECURITY_GROUP --description "NVFlare security group" | jq -r .GroupId)
  report_status "$?" "creating security group"
  echo "Security group id: ${sg_id}"
  my_public_ip=$(dig +short myip.opendns.com @resolver1.opendns.com)
  if [ "$?" -eq 0 ] && [[ "$my_public_ip" =~ ^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$ ]]
  then
    aws ec2 authorize-security-group-ingress --group-id $sg_id --protocol tcp --port 22 --cidr ${my_public_ip}/32 > /tmp/sec_grp.log
  else
    echo "getting my public IP failed, please manually configure the inbound rule to limit SSH access"
    aws ec2 authorize-security-group-ingress --group-id $sg_id --protocol tcp --port 22 --cidr 0.0.0.0/0 > /tmp/sec_grp.log
  fi
  aws ec2 authorize-security-group-ingress --group-id $sg_id --protocol tcp --port 443 --cidr 0.0.0.0/0 >> /tmp/sec_grp.log
  report_status "$?" "creating security group rules"

  # Start provisioning

  echo "Creating VM at region $REGION, may take a few minutes."

  aws ec2 run-instances --region $REGION --image-id $AMI_IMAGE --count 1 --instance-type $EC2_TYPE --key-name $KEY_PAIR --security-group-ids $sg_id > vm_create.json
  report_status "$?" "creating VM"
  instance_id=$(jq -r .Instances[0].InstanceId vm_create.json)

  aws ec2 wait instance-status-ok --instance-ids $instance_id
  aws ec2 describe-instances --instance-ids $instance_id > vm_result.json

  IP_ADDRESS=$(jq -r .Reservations[0].Instances[0].PublicIpAddress vm_result.json)

  echo "VM created with IP address: ${IP_ADDRESS}"

  echo "Installing docker engine in $VM_NAME, may take a few minutes."
  DEST_SITE=${ADMIN_USERNAME}@${IP_ADDRESS}
  scripts=$(cat << 'EOF'
  sudo apt-get update && \
  sudo DEBIAN_FRONTEND=noninteractive apt-get install -y ca-certificates curl gnupg lsb-release && \
  sudo mkdir -p /etc/apt/keyrings && \
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
  echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null && \
  sudo apt-get update && \
  sudo DEBIAN_FRONTEND=noninteractive apt-get install -y docker-ce docker-ce-cli containerd.io
  EOF
  )
  ssh -t -i $KEY_FILE -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${DEST_SITE} "$scripts" > /tmp/docker_engine.log
  report_status "$?" "installing docker engine"
  ssh -t -i $KEY_FILE -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${DEST_SITE} "sudo usermod -aG docker $ADMIN_USERNAME && exit" >> /tmp/docker_engine.log
  report_status "$?" "installing docker engine"

  echo "Installing nvflare in $VM_NAME, may take a few minutes."
  ssh -i $KEY_FILE -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${DEST_SITE} \
    "export PATH=/home/ubuntu/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin && \
    wget -q https://bootstrap.pypa.io/get-pip.py && python3 get-pip.py && \
    python3 -m pip install {~~NVFLARE~~} && \
    mkdir -p ./cert && \
    exit" > /tmp/nvflare.json
  report_status "$?" "installing nvflare"

  echo "Checking if certificate (web.crt) and private key (web.key) are available"
  if [[ -f "web.crt" && -f "web.key" ]]; then
    CERT_FOLDER=${DEST_SITE}:${DEST_FOLDER}/cert
    echo "Cert folder is ${CERT_FOLDER}"
    scp -i $KEY_FILE -r -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null web.{crt,key} $CERT_FOLDER
    report_status "$?" "copying cert/key to VM ${CERT_FOLDER} folder"
    secure=true
  else
    echo "No web.crt and web.key found"
    secure=false
  fi

  echo "Starting dashboard"
  ssh -i $KEY_FILE -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${DEST_SITE} \
    "export PATH=/home/ubuntu/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin && \
    python3 -m nvflare.dashboard.cli --start -f ${DEST_FOLDER} --cred ${credential} {~~START_OPT~~}" > /tmp/dashboard.json

  echo "Dashboard url is running at IP address ${IP_ADDRESS}, listening to port 443."
  if [ "$secure" = true ]
  then
    echo "URL is https://${IP_ADDRESS}"
  else
    echo "URL is http://${IP_ADDRESS}:443"
  fi
  echo "Note: you may need to configure DNS server with your DNS hostname and the above IP address."
  echo "Project admin credential (username:password) is ${credential} ."
  echo "To terminate the EC2 instance, run the following command."
  echo "aws ec2 terminate-instances --instance-ids ${instance_id}"
  echo "Other resources provisioned"
  echo "security group: ${SECURITY_GROUP}"
  echo "key pair: ${KEY_PAIR}"
