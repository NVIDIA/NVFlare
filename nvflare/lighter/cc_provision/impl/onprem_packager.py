# Copyright (c) 2025, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import shutil
import subprocess
from pathlib import Path

from nvflare.lighter.ctx import ProvisionContext
from nvflare.lighter.entity import Participant, Project
from nvflare.lighter.spec import Packager

BUILD_IMAGE_CMD = "build_cvm_image.sh"


class OnPremPackager(Packager):
    def __init__(self, cc_config_key="cc_config", build_image_cmd=BUILD_IMAGE_CMD):
        super().__init__()
        self.cc_config_key = cc_config_key
        self.build_image_cmd = build_image_cmd

    def _build_cc_image(self, cc_config_yaml: str, site_name: str, startup_folder_path: str):
        """Build CC image for the site."""
        print(f"calling {self.build_image_cmd=} {cc_config_yaml=} {site_name=} {startup_folder_path=}")
        try:
            result = subprocess.run(
                [self.build_image_cmd, cc_config_yaml, site_name, startup_folder_path],
                capture_output=True,
                text=True,
                check=True  # Raises CalledProcessError on non-zero return
            )
            print(f"Build process succeeded with return code {result.returncode}")
            print(f"STDOUT:\n{result.stdout}")
            print(f"STDERR:\n{result.stderr}")

        except subprocess.CalledProcessError as e:
            print(f"Build process failed with return code {e.returncode}")
            print(f"STDOUT:\n{e.stdout}")
            print(f"STDERR:\n{e.stderr}")

    def _package_for_participant(self, participant: Participant, ctx: ProvisionContext):
        """Package the startup kit for the participant."""
        if not participant.get_prop(self.cc_config_key):
            return

        dest_dir = Path(ctx.get_result_location())
        # Build CC image
        self._build_cc_image(participant.get_prop(self.cc_config_key), participant.name, dest_dir)

        # TODO: Package the scripts generated by the build_cvm_image.sh

    def package(self, project: Project, ctx: ProvisionContext):
        for p in project.get_all_participants():
            self._package_for_participant(p, ctx)
