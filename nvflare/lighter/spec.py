# Copyright (c) 2021, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from abc import ABC, abstractmethod

from .ctx import ProvisionContext
from .entity import Project


class Builder(ABC):
    def initialize(self, project: Project, ctx: ProvisionContext):
        pass

    @abstractmethod
    def build(self, project: Project, ctx: ProvisionContext):
        pass

    def finalize(self, project: Project, ctx: ProvisionContext):
        pass


class Packager(ABC):
    """Packager is responsible for packaging the generated startup kits for each participant after the kits have
    been generated by the builders.

    The packager, if specified, is called as the last step of the provision process.
    """

    @abstractmethod
    def package(self, project: Project, ctx: ProvisionContext):
        """Package the generated startup kits for release.

        Args:
            project: the project being provisioned
            ctx: the provision context object

        Returns: None

        """
        pass
