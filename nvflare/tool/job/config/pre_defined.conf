{
    workflows {
        STATS.workflow {
            id = "fed_stats_controller"
            name = "StatisticsController"
            args {
                min_clients = 1
                statistic_configs {
                    count = {}
                    # mean= {}
                    # sum = {}
                    # stddev = {}
                    histogram = {
                        "*" = {
                        bins = 10
                        # range = [0,256]
                        }
                    }
                }
                writer_id = "stats_writer"
                enable_pre_run_task = false
            }
        }
        STATS.components {
           stats_writer {
               id =  "stats_writer",
               name  = "JsonStatsFileWriter"
               args {
                   output_path = "statistics/stats.json",
                   json_encoder_path = "nvflare.app_common.utils.json_utils.ObjectEncoder"
               }
           }
        }
        STATS.executors {
            StatisticsExecutor {
                executor {
                    tasks = ["fed_stats_pre_run", "fed_stats"]
                    executor {
                        id =  "stats_executor",
                        name = "StatisticsExecutor",
                        args.generator_id = "stats_generator"
                    }
                }
                task_result_filters = {
                    tasks = ["fed_stats"]
                    filters {
                        StatisticsPrivacyFilter {
                          id = "StatisticsPrivacyFilter"
                          name = "StatisticsPrivacyFilter",
                          args.result_cleanser_ids = [
                            "min_count_cleanser"
                           # "min_max_noise_cleanser",
                           # "hist_bins_cleanser"
                          ]
                        }
                    }
                }
               components {
                    stats_generator {
                      id =  "stats_generator",
                      path = "df_statistics.DFStatistics",
                      args.data_path =  "data.csv" ## NEED TO REPLACE DATA PATH.
                    }
                    min_max_cleanser {
                      id =  "min_max_cleanser",
                      path =  "nvflare.app_common.statistics.min_max_cleanser.AddNoiseToMinMax",
                      args {
                        min_noise_level = 0.1
                        max_noise_level= 0.3
                      }
                   }
                   hist_bins_cleanser {
                      id ="hist_bins_cleanser",
                      path= "nvflare.app_common.statistics.histogram_bins_cleanser.HistogramBinsCleanser",
                      args.max_bins_percent=10
                   }
                   min_count_cleanser {
                      id =  "min_count_cleanser",
                      path = "nvflare.app_common.statistics.min_count_cleanser.MinCountCleanser",
                      args.min_count = 10
                }
              }
            }
        }

        SAG.workflow {
            id = "scatter_and_gather",
            path = "nvflare.app_common.workflows.scatter_and_gather.ScatterAndGather"
            args {
                min_clients =  1,
                num_rounds = 1,
                start_round =  0,
                wait_time_after_min_received = 0,
                aggregator_id = "aggregator",
                persistor_id = "persistor",
                shareable_generator_id =  "shareable_generator",
                train_task_name = "train",
                train_timeout  =  0
            }
        }

        SAG.components {
            persistor {
              id =  "persistor",
              path =  "nvflare.app_opt.pt.file_model_persistor.PTFileModelPersistor",
              args{
              }
            }
            shareable_generator {
              id =  "shareable_generator",
              path =  "nvflare.app_common.shareablegenerators.full_model_shareable_generator.FullModelShareableGenerator",
              args {}
            }
            aggregator {
                id = "aggregator",
                path = "nvflare.app_common.aggregators.intime_accumulate_model_aggregator.InTimeAccumulateWeightedAggregator",
                args {
                    expected_data_kind = "WEIGHTS",
                    aggregation_weights{
                    }
                }
            }
        }
        SAG.executors {
            PTFilePipeLauncherExecutor {
                default = true
                executor {
                    tasks = ["train"]
                    executor {
                        name = "PTFilePipeLauncherExecutor"
                        args {
                            launcher_id="pt_launcher"
                        }
                    }
                }
                components {
                    pt_launcher {
                      id = "pt_launcher"
                      name = "SubprocessLauncher"
                      args.script = "python custom/cifar10.py" # you need to modify the code path to fit your needs.
                    }
                }
            }
        }

        CROSS.workflow {
            path = "nvflare.app_common.workflows.cross_site_model_eval.CrossSiteModelEval"
            args {
                model_locator_id = "model_locator"
                submit_model_timeout = 600
                validation_timeout =  6000
                cleanup_models =  false
            }
        }
        CYCLIC.workflow {
            path ="nvflare.app_common.workflows.cyclic_ctl.CyclicController"
            args {
                num_rounds= 1,
                task_assignment_timeout = 8
                persistor_id  = "persistor"
                shareable_generator_id = "shareable_generator"
                task_name = "train"
            }
        }
    }


}