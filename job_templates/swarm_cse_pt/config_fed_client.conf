format_version = 2
# Client Computing Executors.
executors = [
  {
    # tasks the executors are defined to handle
    tasks = [
      "train",
      "validate",
      "submit_model"
    ]
    executor {
      id = "Executor"
      # Executor name : PTClientAPILauncherExecutor
      # This is an executor for pytorch + Client API. The underline data exchange is using Pipe.
      path = "nvflare.app_opt.pt.client_api_launcher_executor.PTClientAPILauncherExecutor"
      args {
        # launcher_id is used to locate the Launcher object in "components"
        launcher_id = "launcher"
        # pipe_id is used to locate the Pipe object in "components"
        pipe_id = "pipe"
        # Timeout in seconds for waiting for a heartbeat from the training script. Defaults to 30 seconds.
        # Please refer to the class docstring for all available arguments
        heartbeat_timeout = 60
        # if the transfer_type is FULL, then it will be sent directly
        # if the transfer_type is DIFF, then we will calculate the
        # difference VS received parameters and send the difference
        params_transfer_type = "FULL"
        # if train_with_evaluation is true, the executor will expect
        # the custom code need to send back both the trained parameters and the evaluation metric
        # otherwise only trained parameters are expected
        train_with_evaluation = true
        # tasks for different modes
        train_task_name = "train"
        evaluate_task_name = "validate"
        submit_model_task_name = "submit_model"
      }
    }
  }
  {
    # All tasks prefixed with swarm_ are routed to SwarmClientController
    tasks = ["swarm_*"]
    executor {
      # client-side controller for training and logic and aggregation management
      path = "nvflare.app_common.ccwf.SwarmClientController"
      args {
        # train task must be implemented by Executor
        learn_task_name = "train"
        # how long to wait for current learn task before timing out the gathering
        learn_task_timeout = 600
        # ids must map to corresponding components
        persistor_id = "persistor"
        aggregator_id = "aggregator"
        shareable_generator_id = "shareable_generator"
        min_responses_required = 2
        wait_time_after_min_resps_received = 30
      }
    }
  }
  {
    # All tasks prefixed with cse_ are routed to CrossSiteEvalClientController
    tasks = ["cse_*"]
    executor {
      # client-side controller for cse
      path = "nvflare.app_common.ccwf.CrossSiteEvalClientController"
      args {
        # submit_model and validate tasks must be implemented by Executor
        submit_model_task_name = "submit_model"
        validation_task_name = "validate"
        # persistor id must map to corresponding persistor component
        persistor_id = "persistor"
        get_model_timeout = 60
      }
    }
  }
]
task_result_filters = []
task_data_filters = []
components = [
  {
    # component id is "launcher"
    id = "launcher"

    # the class path of this component
    path = "nvflare.app_common.launchers.subprocess_launcher.SubprocessLauncher"

    args {
      # the launcher will invoke the script
      script = "python3 custom/{app_script}  {app_config} "
      # if launch_once is true, the SubprocessLauncher will launch once for the whole job
      # if launch_once is false, the SubprocessLauncher will launch a process for each task it receives from server
      launch_once = true
    }
  }
  {
    id = "pipe"

    path = "nvflare.fuel.utils.pipe.file_pipe.FilePipe"

    args {
      mode = "PASSIVE"
      # root_path: is the directory location of the parameters exchange.
      # You can also set it to an absolute path in your system.
      root_path = "{WORKSPACE}/{JOB_ID}/{SITE_NAME}"
    }
  }
  {
    id = "persistor"
    path = "nvflare.app_opt.pt.file_model_persistor.PTFileModelPersistor"
    args {
      model {
        path = "net.Net"
      }
    }
  }
  {
    id = "shareable_generator"
    path = "nvflare.app_common.ccwf.comps.simple_model_shareable_generator.SimpleModelShareableGenerator"
    args {}
  }
  {
    id = "aggregator"
    path = "nvflare.app_common.aggregators.intime_accumulate_model_aggregator.InTimeAccumulateWeightedAggregator"
    args {
      expected_data_kind = "WEIGHTS"
    }
  }
  {
    id = "model_selector"
    path = "nvflare.app_common.widgets.intime_model_selector.IntimeModelSelector"
    args {
      key_metric = "accuracy"
    }
  }
  # prints best results once executor is finalized
  {
    id = "result_printer"
    path = "nvflare.app_common.ccwf.comps.cwe_result_printer.CWEResultPrinter"
    args {}
  }
]
