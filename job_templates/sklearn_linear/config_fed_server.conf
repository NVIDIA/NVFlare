{
  format_version = 2
  server.task_request_interval = 0.05
  task_data_filters = []
  task_result_filters =  []
  components = [
    {
      id = "persistor"
      path = "nvflare.app_opt.sklearn.joblib_model_param_persistor.JoblibModelParamPersistor",
      args {
        initial_params {
          n_classes = 2
          learning_rate = "constant" # learning_rate  default=’optimal’, ‘constant’: eta = eta0
          eta0 =  1e-4         # The initial learning rate for the ‘constant’, ‘invscaling’ or ‘adaptive’ schedules. T
          loss = log_loss      # ‘log_loss’ gives logistic regression, a probabilistic classifier.
          penalty = l2         # The penalty (aka regularization term) to be used. Defaults to ‘l2’ which is the standard regularizer for linear
          fit_intercept = True # Whether the intercept should be estimated or not. If False, the data is assumed to be already centered.
          max_iter = 1000      # The maximum number of passes over the training data (aka epochs). It only impacts the behavior in the fit method, and not the partial_fit method. Values must be in the range [1, inf).
        }
      }
    },
    {
      id = "shareable_generator"
      name =  "FullModelShareableGenerator"
      args = {}
    },
    {
      id =  "aggregator"
      name =  "InTimeAccumulateWeightedAggregator"
      args.expected_data_kind = "WEIGHTS"
    }
  ]

  workflows = [
    {
      id =  "scatter_and_gather",
      name =  "ScatterAndGather",
      args {
        min_clients = 3
        num_rounds = 50
        start_round = 0
        wait_time_after_min_received = 0
        aggregator_id = "aggregator"
        persistor_id =  "persistor"
        shareable_generator_id = "shareable_generator"
        train_task_name = "train"
        train_timeout = 0
      }
    }
  ]
}
