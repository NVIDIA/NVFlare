format_version = 2
executors = [
  {
    tasks = [
      "train"
    ]
    executor {
      # Federated XGBoost Executor for histogram-base collaboration
      id = "xgb_hist_executor"
      name = "FedXGBHistogramExecutor"
      args {
        num_rounds = 100
        early_stopping_rounds = 2
        # booster parameters, see https://xgboost.readthedocs.io/en/stable/parameter.html for more details
        xgb_params {
          max_depth = 8
          eta = 0.1
          objective = "binary:logistic"
          eval_metric = "auc"
          tree_method ="hist"
          nthread = 16
        }
        data_loader_id = "dataloader"
        # whether to enable GPU training
        use_gpus = false
      }
    }
  }
]
task_result_filters = []
task_data_filters = []
components = [
  {
    # reads intersection calculated by PSI and returns train and validation XGB data matrices in column split mode
    id = "dataloader"
    path = "vertical_data_loader.VerticalDataLoader"
    args {
      # path to the data split for site (for the example we replace site-x with client_id)
      data_split_path = "/tmp/nvflare/vertical_xgb_data/site-x/higgs.data.csv"
      # written by FilePSIWriter
      psi_path = "/tmp/nvflare/vertical_xgb_psi/simulate_job/site-x/psi/intersection.txt"
      # column that intersection is calculated with
      id_col = "uid"
      # site that contains the label column
      label_owner = "site-1"
      # proportion of intersection to use as training, with the remaining used for validation (must be the same across all sites)
      train_proportion = 0.8
    }
  }
]
