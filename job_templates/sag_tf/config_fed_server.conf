format_version = 2
task_data_filters = []
task_result_filters = []
workflows = [
  {
    id = "scatter_and_gather"
    path = "nvflare.app_common.workflows.scatter_and_gather.ScatterAndGather"
    args {
      min_clients = 2
      num_rounds = 5
      start_round = 0
      wait_time_after_min_received = 0
      aggregator_id = "aggregator"
      persistor_id = "persistor"
      shareable_generator_id = "shareable_generator"
      train_task_name = "train"
      train_timeout = 0
    }
  }
]
components = [
  {
    id = "persistor"
    path = "nvflare.app_opt.tf.model_persistor.TFModelPersistor"
    args {
      model {
        path = "tf_net.TFNet"
        args {
          input_shape = [null, 32, 32, 3]
        }
      }
      save_name = "tf_model.ckpt"
    }
  }
  {
    id = "shareable_generator"
    path = "nvflare.app_common.shareablegenerators.full_model_shareable_generator.FullModelShareableGenerator"
    args {}
  }
  {
    id = "aggregator"
    path = "nvflare.app_common.aggregators.intime_accumulate_model_aggregator.InTimeAccumulateWeightedAggregator"
    args {
      expected_data_kind = "WEIGHT_DIFF"
    }
  }
  {
    id = "model_selector"
    path = "nvflare.app_common.widgets.intime_model_selector.IntimeModelSelector"
    args {
      key_metric = "accuracy"
    }
  }
]
