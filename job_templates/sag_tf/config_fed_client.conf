format_version = 2
app_script = "cifar10_tf_fl.py"
app_config = ""
executors = [
  {
    tasks = [
      "train"
    ]
    executor {
      path = "nvflare.app_common.executors.client_api_launcher_executor.ClientAPILauncherExecutor"
      args {
        # launcher_id is used to locate the Launcher object in "components"
        launcher_id = "launcher"

        # pipe_id is used to locate the Pipe object in "components"
        pipe_id = "pipe"

        # Timeout in seconds for waiting for a heartbeat from the training script. Defaults to 30 seconds.
        # Please refer to the class docstring for all available arguments
        heartbeat_timeout = 60

        # format of the exchange parameters
        params_exchange_format =  "numpy"

        # if the transfer_type is FULL, then it will be sent directly
        # if the transfer_type is DIFF, then we will calculate the
        # difference VS received parameters and send the difference
        params_transfer_type = "DIFF"

        # if train_with_evaluation is true, the executor will expect
        # the custom code need to send back both the trained parameters and the evaluation metric
        # otherwise only trained parameters are expected
        train_with_evaluation = true

        # params converter from NVFlare side to 3rd party
        # from_nvflare_converter_id is used to locate the ParamsConverter object in "components"
        from_nvflare_converter_id = "from_nvflare"

        # params converter from 3rd party to NVFlare side
        # to_nvflare_converter_id is used to locate the ParamsConverter object in "components"
        to_nvflare_converter_id = "to_nvflare"
      }
    }
  }
]
task_data_filters = []
task_result_filters = []
components = [
  {
    # component id is "launcher"
    id = "launcher"

    # the class path of this component
    path = "nvflare.app_common.launchers.subprocess_launcher.SubprocessLauncher"

    args {
      # the launcher will invoke the script
      script = "python3 custom/{app_script}  {app_config} "
      # if launch_once is true, the SubprocessLauncher will launch once for the whole job
      # if launch_once is false, the SubprocessLauncher will launch a process for each task it receives from server
      launch_once = true
    }
  }
  {
    id = "pipe"

    path = "nvflare.fuel.utils.pipe.file_pipe.FilePipe"

    args {
      mode = "PASSIVE"
      # root_path: is the directory location of the parameters exchange.
      # You can also set it to an absolute path in your system.
      root_path = "{WORKSPACE}/{JOB_ID}/{SITE_NAME}"
    }
  }
  {
    id = "from_nvflare"
    # NVFlare server side expects a flattened dict, where each key maps to one array
    # while Keras layer.get_weights() returns a hierarchical dict, where each key might map to a list of arrays
    # for example: {"layer0": [weights_array, bias_array]}, so we need to do the conversion
    # please refer to nvflare.app_opt.tf.utils for detailed implementation
    # convert flattened numpy dict back to a dict of {layer_name: layer.get_weights()}
    path = "nvflare.app_opt.tf.params_converter.NumpyToKerasModelParamsConverter"
    args {}
  }
  {
    id = "to_nvflare"
    # convert a dict of {layer_name: layer.get_weights()} to flattened numpy dict
    path = "nvflare.app_opt.tf.params_converter.KerasModelToNumpyParamsConverter"
    args {}
  }
]
