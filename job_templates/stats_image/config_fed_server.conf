{
  "format_version": 2,

  # Federated Statistics workflow
  "workflows": [
    {
      # id and class path of the StatisticController
      "id": "fed_stats_controller",
      "path": "nvflare.app_common.workflows.statistics_controller.StatisticsController",
      "args": {
        # the controller specifiy the min_clients and statistic configurations
        "min_clients": 2,
        # the statistic_configs defines what are the required local statistics that client must implement in order for the global
        # stats to be aggregated.
        # In this example, we only require client to return two local metrics: count and histogram.
        # here the definition for count is for all features.
        # histogram, use "*" to indicate any feature name. One can replace with specify feature configuration.
        # In this configuration, it specify that, for any feature, it will have 255 bins, and bin range is from 0 to 256
        "statistic_configs": {
          "count": {},
          "histogram": {
            "*": {
              "bins": 255,
               "range": [0,256]
            }
          }
        },

        # the controller will also leverage writer, identified by writer_id ="stats_writer", to save the resulting
        # statistics result. "stats_writer" is an component defined later in components section.
        "writer_id": "stats_writer",

        # we are not enable pre_run task.
        # pre_run is a feature that allows user to run an task before the regular run. Thus called "pre_run".
        # The pre_run allows use to do some tasks that not necessarily defined by the controller, thus may or may not be
        # be able to aggregate the global statistics.

        # But this feature enable user to calculate and compute the non-standard metrics and compare different clients
        # even without global aggregation.

        # We are not using this by default
        "enable_pre_run_task": false
      }
    }
  ],
  "components": [
    {
      # statistics writer that will save the statistics result.
      # The default writer is Json Stats writer, which will save the result in JSON format.
      "id": "stats_writer",
      "path": "nvflare.app_common.statistics.json_stats_file_persistor.JsonStatsFileWriter",
      "args": {
        # the result output path.
        "output_path": "statistics/image_statistics.json",
        "json_encoder_path": "nvflare.app_common.utils.json_utils.ObjectEncoder"
      }
    }
  ]
}