{
  # version of the configuration
  format_version = 2

  # task data filter: if filters are provided, the filter will filter the data flow out of server to client.
  task_data_filters =[]

  # task result filter: if filters are provided, the filter will filter the result flow out of client to server.
  task_result_filters = []

  # This assumes that there will be a "net.py" file with class name "Net".
  # If your model code is not in "net.py" and class name is not "Net", please modify here
  model_class_path = "net.Net"

  num_rounds = 3

  # workflows: Array of workflows the control the Federated Learning workflow lifecycle.
  # One can specify multiple workflows. The NVFLARE will run them in the order specified.
  workflows = [
      {
        id = "fedopt_ctl",
        path = "nvflare.app_opt.pt.fedopt_ctl.FedOpt",
        args {
          num_clients = 2,
          num_rounds = "{num_rounds}",
          device = "cpu",
          source_model.path = "{model_class_path}"
          optimizer_args {
            path = "torch.optim.SGD",
            args {
              lr = 1.0,
              momentum = 0.6
            },
            config_type = "dict"
          },
          lr_scheduler_args {
            path = "torch.optim.lr_scheduler.CosineAnnealingLR",
            args {
              T_max = "{num_rounds}",
              eta_min = 0.9
            },
            config_type = "dict"
          }
          persistor_id = "persistor"
        }
      }
  ]

  # List of components used in the server side workflow.
  components = [
    {
      # This is the persistence component used in above workflow.
      # PTFileModelPersistor is a Pytorch persistor which save/read the model to/from file.

      id = "persistor"
      path = "nvflare.app_opt.pt.file_model_persistor.PTFileModelPersistor"

      # the persitor class take model class as argument
      # This imply that the model is initialized from the server-side.
      # The initialized model will be broadcast to all the clients to start the training.
      args.model.path = "{model_class_path}"
    }
  ]
}
