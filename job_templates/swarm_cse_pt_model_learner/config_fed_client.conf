format_version = 2
executors = [
  {
    # tasks that the ModelLearnerExecutor supports
    tasks = [
      "train",
      "submit_model",
      "validate"
    ]
    # standard executor for ModelLearners
    executor {
      id = "Executor"
      path = "nvflare.app_common.executors.model_learner_executor.ModelLearnerExecutor"
      args {
        # learner_id must match the id of the learner defined in components
        learner_id = "cifar10-learner"
      }
    }
  }
  {
    # All tasks prefixed with swarm_ are routed to SwarmClientController
    tasks = ["swarm_*"]
    executor {
      # client-side controller for training and logic and aggregration management
      path = "nvflare.app_common.ccwf.SwarmClientController"
      args {
        # train task must be implemented by Executor
        learn_task_name = "train"
        # how long to wait for current learn task before timing out the gathering
        learn_task_timeout = 600
        # ids must map to corresponding components
        persistor_id = "persistor"
        aggregator_id = "aggregator"
        shareable_generator_id = "shareable_generator"
        min_responses_required = 2
        wait_time_after_min_resps_received = 30
      }
    }
  }
  {
    # All tasks prefixed with cse_ are routed to CrossSiteEvalClientController
    tasks = ["cse_*"]
    executor {
      # client-side controller for cse
      path = "nvflare.app_common.ccwf.CrossSiteEvalClientController"
      args {
        # submit_model and validate tasks must be implemented by Executor
        submit_model_task_name = "submit_model"
        validation_task_name = "validate"
        # persistor id must map to corresponding persistor component
        persistor_id = "persistor"
        get_model_timeout = 60
      }
    }
  }
]
task_result_filters = []
task_data_filters = []
components = [
  {
    # standard CIFAR-10 ModelLearner
    id = "cifar10-learner"
    path = "pt.learners.cifar10_model_learner.CIFAR10ModelLearner"
    args {
      train_idx_root = "/tmp/cifar10_splits"
      aggregation_epochs = 3
      lr = 0.002
    }
  }
  {
    id = "persistor"
    path = "nvflare.app_opt.pt.file_model_persistor.PTFileModelPersistor"
    args {
      model {
        path = "pt.networks.cifar10_nets.ModerateCNN"
      }
    }
  }
  {
    id = "shareable_generator"
    path = "nvflare.app_common.ccwf.comps.simple_model_shareable_generator.SimpleModelShareableGenerator"
    args {}
  }
  {
    id = "aggregator"
    path = "nvflare.app_common.aggregators.intime_accumulate_model_aggregator.InTimeAccumulateWeightedAggregator"
    args {
      expected_data_kind = "WEIGHT_DIFF"
    }
  }
  {
    id = "model_selector"
    path = "nvflare.app_common.widgets.intime_model_selector.IntimeModelSelector"
    args {}
  }
  {
    id = "result_printer"
    path = "nvflare.app_common.ccwf.comps.cwe_result_printer.CWEResultPrinter"
    args {}
  }
]
