# Copyright (c) 2025, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import tempfile
from unittest.mock import MagicMock, patch

import pytest

from nvflare.recipe.poc_env import POCEnv
from nvflare.tool.poc.service_constants import FlareServiceConstants as SC


def test_poc_env_initialization():
    """Test POCEnv initialization with default values."""
    env = POCEnv()
    assert env.num_clients == 2
    assert env.gpu_ids == []


@patch("nvflare.recipe.poc_env.get_poc_workspace")
def test_poc_env_initialization_with_custom_values(mock_get_workspace):
    """Test POCEnv initialization with custom values."""
    with tempfile.TemporaryDirectory() as temp_dir:
        mock_get_workspace.return_value = temp_dir
        env = POCEnv(
            num_clients=3,
            gpu_ids=[0, 1],
        )
        assert env.poc_workspace == temp_dir
        assert env.num_clients == 3
        assert env.gpu_ids == [0, 1]


def test_poc_env_validation():
    """Test POCEnv validation for invalid configurations."""
    # Test with zero clients (invalid)
    with pytest.raises(ValueError, match="Input should be greater than 0"):
        POCEnv(num_clients=0)

    # Test with negative clients (invalid)
    with pytest.raises(ValueError, match="Input should be greater than 0"):
        POCEnv(num_clients=-1)

    # Test with empty clients list (invalid)
    with pytest.raises(ValueError, match="clients list cannot be empty"):
        POCEnv(clients=[])

    # Test with inconsistent num_clients and clients
    with pytest.raises(ValueError, match="Inconsistent"):
        POCEnv(num_clients=3, clients=["site1", "site2"])


def test_poc_env_client_names():
    """Test POCEnv client name generation and validation."""
    # Test auto-generated client names (delegated to prepare_poc_provision)
    env = POCEnv(num_clients=3)
    assert env.clients is None  # Will be generated by prepare_poc_provision
    assert env.num_clients == 3

    # Test custom client names
    custom_clients = ["client-a", "client-b"]
    env = POCEnv(clients=custom_clients)
    assert env.clients == custom_clients
    assert env.num_clients == 2

    # Test consistent num_clients and clients
    env = POCEnv(num_clients=2, clients=["site-x", "site-y"])
    assert env.clients == ["site-x", "site-y"]
    assert env.num_clients == 2


@patch("nvflare.recipe.poc_env.get_poc_workspace")
@patch("nvflare.recipe.poc_env.get_prod_dir")
@patch("nvflare.recipe.poc_env.setup_service_config")
def test_get_admin_startup_kit_path(mock_setup, mock_get_prod_dir, mock_get_workspace):
    """Test getting admin startup kit path."""
    with tempfile.TemporaryDirectory() as temp_dir:
        mock_get_workspace.return_value = temp_dir
        prod_dir = os.path.join(temp_dir, "prod_00")
        mock_get_prod_dir.return_value = prod_dir
        mock_setup.return_value = ({"name": "test_project"}, {SC.FLARE_PROJ_ADMIN: "admin@nvidia.com"})

        env = POCEnv()

        # Create the expected admin directory structure
        admin_dir = os.path.join(prod_dir, "admin@nvidia.com")
        os.makedirs(admin_dir, exist_ok=True)

        result = env._get_admin_startup_kit_path()
        assert result == admin_dir


@patch("nvflare.recipe.poc_env.get_poc_workspace")
@patch("nvflare.recipe.poc_env.get_prod_dir")
@patch("nvflare.recipe.poc_env.setup_service_config")
def test_get_admin_startup_kit_path_not_found(mock_setup, mock_get_prod_dir, mock_get_workspace):
    """Test getting admin startup kit path when directory doesn't exist."""
    with tempfile.TemporaryDirectory() as temp_dir:
        mock_get_workspace.return_value = temp_dir
        prod_dir = os.path.join(temp_dir, "prod_00")
        mock_get_prod_dir.return_value = prod_dir
        mock_setup.return_value = ({"name": "test_project"}, {SC.FLARE_PROJ_ADMIN: "admin@nvidia.com"})

        env = POCEnv()

        with pytest.raises(RuntimeError, match="Admin startup kit not found"):
            env._get_admin_startup_kit_path()


@patch("nvflare.recipe.poc_env.new_secure_session")
def test_submit_and_monitor_job(mock_session):
    """Test job submission via single Flare API session."""
    mock_sess = MagicMock()
    mock_sess.submit_job.return_value = "job_12345"
    mock_session.return_value = mock_sess

    env = POCEnv()

    with patch.object(env, "_get_admin_startup_kit_path", return_value="/fake/admin/dir"):
        result = env._submit_and_monitor_job("/fake/job/path", "test_job")

        assert result == "job_12345"
        mock_session.assert_called_once_with(username="admin@nvidia.com", startup_kit_location="/fake/admin/dir")
        mock_sess.submit_job.assert_called_once_with("/fake/job/path")
        mock_sess.close.assert_called_once()


@patch("nvflare.recipe.poc_env.tempfile.TemporaryDirectory")
@patch("nvflare.recipe.poc_env.time.sleep")
def test_deploy_job_integration(mock_sleep, mock_temp_dir):
    """Test complete job deployment flow."""
    # Mock temporary directory
    mock_temp_dir_obj = MagicMock()
    mock_temp_dir_obj.__enter__.return_value = "/tmp/temp_dir"
    mock_temp_dir_obj.__exit__.return_value = None
    mock_temp_dir.return_value = mock_temp_dir_obj

    # Mock job
    mock_job = MagicMock()
    mock_job.name = "test_job"
    mock_job.export_job = MagicMock()

    env = POCEnv()

    with (
        patch.object(env, "_check_poc_running", return_value=False),
        patch("nvflare.recipe.poc_env.prepare_poc_provision") as mock_prepare,
        patch("nvflare.recipe.poc_env._start_poc") as mock_start_poc,
        patch.object(env, "_submit_and_monitor_job", return_value="job_12345"),
    ):
        result = env.deploy(mock_job)

        assert result == "job_12345"
        mock_job.export_job.assert_called_once_with("/tmp/temp_dir")
        env._submit_and_monitor_job.assert_called_once_with("/tmp/temp_dir/test_job", "test_job")

        # Verify POC services were prepared and started
        mock_prepare.assert_called_once()
        mock_start_poc.assert_called_once()


@patch("nvflare.recipe.poc_env.tempfile.TemporaryDirectory")
@patch("nvflare.recipe.poc_env.time.sleep")
def test_deploy_job_with_existing_poc(mock_sleep, mock_temp_dir):
    """Test job deployment when POC is already running."""
    # Mock temporary directory
    mock_temp_dir_obj = MagicMock()
    mock_temp_dir_obj.__enter__.return_value = "/tmp/temp_dir"
    mock_temp_dir_obj.__exit__.return_value = None
    mock_temp_dir.return_value = mock_temp_dir_obj

    # Mock job
    mock_job = MagicMock()
    mock_job.name = "test_job"
    mock_job.export_job = MagicMock()

    env = POCEnv()

    with (
        patch.object(env, "_check_poc_running", return_value=True),  # POC already running
        patch.object(env, "stop") as mock_stop,  # Should stop existing POC
        patch("nvflare.recipe.poc_env.prepare_poc_provision") as mock_prepare,
        patch("nvflare.recipe.poc_env._start_poc") as mock_start_poc,
        patch.object(env, "_submit_and_monitor_job", return_value="job_12345"),
    ):
        result = env.deploy(mock_job)

        assert result == "job_12345"
        # Should stop existing POC before starting fresh one
        mock_stop.assert_called_once()


@patch("nvflare.recipe.poc_env.setup_service_config")
@patch("nvflare.recipe.poc_env._stop_poc")
@patch("nvflare.recipe.poc_env._clean_poc")
@patch("nvflare.recipe.poc_env.is_poc_running")
@patch("nvflare.recipe.poc_env.shutil.rmtree")
def test_stop_poc(mock_rmtree, mock_is_running, mock_clean_poc, mock_stop_poc, mock_setup):
    """Test stop and clean POC functionality."""
    mock_setup.return_value = ({"name": "test"}, {"server": "server"})
    mock_is_running.return_value = False  # POC stops successfully

    env = POCEnv()
    env.stop(clean_poc=True)

    mock_stop_poc.assert_called_once_with(
        poc_workspace=env.poc_workspace, excluded=["admin@nvidia.com"], services_list=[]
    )
    mock_clean_poc.assert_called_once_with(env.poc_workspace)
    mock_rmtree.assert_called_once_with(env.poc_workspace, ignore_errors=True)
