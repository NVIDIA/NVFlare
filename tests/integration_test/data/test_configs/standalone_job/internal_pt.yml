n_servers: 1
n_clients: 2
jobs_root_dir: ./data/apps
cleanup: True
poll_period: 1

tests:
  - test_name: "run pt_use_path"
    event_sequence:
      - "trigger":
          "type": "server_log"
          "data": "Server started"
        "actions": [ "submit_job pt_use_path" ]
        "result":
          "type": "job_submit_success"
      - "trigger":
          "type": "run_state"
          "data": { "run_finished": True }
        "actions": [ "ensure_current_job_done" ]
        "result":
          "type": "run_state"
          "data": { "run_finished": True }
    validators:
      - path: tests.integration_test.src.validators.PTModelValidator
    setup:
      - python -c "from torchvision.datasets import CIFAR10; CIFAR10(root='/tmp/nvflare/cifar10_data', download=True)"
    teardown:
      - rm -rf /tmp/nvflare/cifar10_data
  - test_name: "run pt_use_name"
    event_sequence:
      - "trigger":
          "type": "server_log"
          "data": "Server started"
        "actions": [ "submit_job pt_use_name" ]
        "result":
          "type": "job_submit_success"
      - "trigger":
          "type": "run_state"
          "data": { "run_finished": True }
        "actions": [ "ensure_current_job_done" ]
        "result":
          "type": "run_state"
          "data": { "run_finished": True }
    validators:
      - path: tests.integration_test.src.validators.PTModelValidator
    setup:
      - python -c "from torchvision.datasets import CIFAR10; CIFAR10(root='/tmp/nvflare/cifar10_data', download=True)"
    teardown:
      - rm -rf /tmp/nvflare/cifar10_data
  - test_name: "run pt_init_client"
    event_sequence:
      - "trigger":
          "type": "server_log"
          "data": "Server started"
        "actions": [ "submit_job pt_init_client" ]
        "result":
          "type": "job_submit_success"
      - "trigger":
          "type": "run_state"
          "data": { "run_finished": True }
        "actions": [ "ensure_current_job_done" ]
        "result":
          "type": "run_state"
          "data": { "run_finished": True }
    validators:
      - path: tests.integration_test.src.validators.PTModelValidator
    setup:
      - python -c "from torchvision.datasets import CIFAR10; CIFAR10(root='/tmp/nvflare/cifar10_data', download=True)"
    teardown:
      - rm -rf /tmp/nvflare/cifar10_data
  - test_name: "run tb_streaming"
    event_sequence:
      - "trigger":
          "type": "server_log"
          "data": "Server started"
        "actions": [ "submit_job tb_streaming" ]
        "result":
          "type": "job_submit_success"
      - "trigger":
          "type": "run_state"
          "data": { "run_finished": True }
        "actions": [ "ensure_current_job_done" ]
        "result":
          "type": "run_state"
          "data": { "run_finished": True }
    validators:
      - path: tests.integration_test.src.validators.TBResultValidator
        args: { require_result_on_client: True }
    setup:
      - python -m pip install tensorboard
