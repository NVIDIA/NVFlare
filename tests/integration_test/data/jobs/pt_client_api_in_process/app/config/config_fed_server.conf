{
  format_version = 2
  task_data_filters = []
  task_result_filters = []
  model_class_path = "net.Net"
  workflows = [
    {
      id = "scatter_and_gather"
      path = "nvflare.app_common.workflows.scatter_and_gather.ScatterAndGather"
      args {
        min_clients = 2
        num_rounds = 3
        start_round = 0
        wait_time_after_min_received = 0
        aggregator_id = "aggregator"
        persistor_id = "persistor"
        shareable_generator_id = "shareable_generator"
        train_task_name = "train"
        train_timeout = 0
      }
    }
  ]
  components = [
    {
      id = "persistor"
      path = "nvflare.app_opt.pt.file_model_persistor.PTFileModelPersistor"
      args {
        model {
          path = "{model_class_path}"
        }
      }
    }
    {
      id = "shareable_generator"
      path = "nvflare.app_common.shareablegenerators.full_model_shareable_generator.FullModelShareableGenerator"
      args {}
    }
    {
      id = "aggregator"
      path = "nvflare.app_common.aggregators.intime_accumulate_model_aggregator.InTimeAccumulateWeightedAggregator"
      args {
        expected_data_kind = "WEIGHT_DIFF"
      }
    }
    {
      id = "model_selector"
      path = "nvflare.app_common.widgets.intime_model_selector.IntimeModelSelector"
      args {
        key_metric = "accuracy"
      }
    }
    {
      id = "receiver"
      path = "nvflare.app_opt.tracking.tb.tb_receiver.TBAnalyticsReceiver"
      args {
        events = [
          "fed.analytix_log_stats"
        ]
      }
    }
    {
      id = "mlflow_receiver"
      path = "nvflare.app_opt.tracking.mlflow.mlflow_receiver.MLflowReceiver"
      args {
        tracking_uri = ""
        kwargs {
          experiment_name = "nvflare-sag-pt-experiment"
          run_name = "nvflare-sag-pt-with-mlflow"
          experiment_tags {
            "mlflow.note.content" = "## **NVFlare SAG PyTorch experiment with MLflow**"
          }
          run_tags {
            "mlflow.note.content" = """## Federated Experiment tracking with MLflow 
### Example of using **[NVIDIA FLARE](https://nvflare.readthedocs.io/en/main/index.html)** to train an image classifier using federated averaging ([FedAvg]([FedAvg](https://arxiv.org/abs/1602.05629))) and [PyTorch](https://pytorch.org/) as the deep learning training framework. This example also highlights the NVFlare streaming capability from the clients to the server.

> **_NOTE:_** 
 This example uses the *[CIFAR-10](https://www.cs.toronto.edu/~kriz/cifar.html)* dataset and will load its data within the trainer code.
"""
          }
        }
        artifact_location = "artifacts"
        events = [
          "fed.analytix_log_stats"
        ]
      }
    }
  ]
}
