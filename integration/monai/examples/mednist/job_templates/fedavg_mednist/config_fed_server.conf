{
  # version of the configuration
  format_version = 2

  # task data filter: if filters are provided, the filter will filter the data flow out of server to client.
  task_data_filters =[]

  # task result filter: if filters are provided, the filter will filter the result flow out of client to server.
  task_result_filters = []

  # This assumes that there will be a "net.py" file with class name "Net".
  # If your model code is not in "net.py" and class name is not "Net", please modify here
  model_class_path = "monai.networks.nets.densenet121"

  # densenet arguments
  spatial_dims = 2
  in_channels = 1
  out_channels = 6

  # workflows: Array of workflows the control the Federated Learning workflow lifecycle.
  # One can specify multiple workflows. The NVFLARE will run them in the order specified.
  workflows = [
      {
        # 1st workflow"
        id = "scatter_and_gather"

        # name = ScatterAndGather, path is the class path of the ScatterAndGather controller.
        path = "nvflare.app_common.workflows.fedavg.FedAvg"
        args {
            # argument of the ScatterAndGather class.
            # min number of clients required for ScatterAndGather controller to move to the next round
            # during the workflow cycle. The controller will wait until the min_clients returned from clients
            # before move to the next step.
            min_clients = 2

            # number of global round of the training.
            num_rounds = 5
        }
      }
  ]

  # List of components used in the server side workflow.
  components = [
    {
      # This is the persistence component used in above workflow.
      # PTFileModelPersistor is a Pytorch persistor which save/read the model to/from file.

      id = "persistor"
      path = "nvflare.app_opt.pt.file_model_persistor.PTFileModelPersistor"

      # the persitor class take model class as argument
      # This imply that the model is initialized from the server-side.
      # The initialized model will be broadcast to all the clients to start the training.
      args.model.path = "{model_class_path}"
      args.model.args.spatial_dims = "{spatial_dims}"
      args.model.args.in_channels = "{in_channels}"
      args.model.args.out_channels = "{out_channels}"
    },
    {
      # This component is not directly used in Workflow.
      # it select the best model based on the incoming global validation metrics.
      id = "model_selector"
      path =  "nvflare.app_common.widgets.intime_model_selector.IntimeModelSelector"
      # need to make sure this "key_metric" match what server side received
      args.key_metric = "accuracy"
    },
    {
      id = "receiver"
      path = "nvflare.app_opt.tracking.tb.tb_receiver.TBAnalyticsReceiver"
      args.events = ["fed.analytix_log_stats"]
    },
    {
          id = "mlflow_receiver"
          path = "nvflare.app_opt.tracking.mlflow.mlflow_receiver.MLflowReceiver"
          args {
            # tracking_uri = "http://0.0.0.0:5000"
            tracking_uri = ""
            kwargs {
              experiment_name =  "nvflare-fedavg-mednist-experiment"
              run_name = "nvflare-fedavg-mednist-with-mlflow"
              experiment_tags {
                "mlflow.note.content": "## **NVFlare FedAvg MONAI experiment with MLflow**"
              }
              run_tags {
                "mlflow.note.content" = "## Federated Experiment tracking with MONAI and MLflow \n###"
              }
            }
            artifact_location = "artifacts"
            events = ["fed.analytix_log_stats"]
          }
        }
  ]

}
