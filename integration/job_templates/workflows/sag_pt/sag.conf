{
    workflows {
        sag_pt.input_variables {
                min_clients      = "workflows.sag_pt.workflow.args.min_clients"
                num_rounds       = "workflows.sag_pt.workflow.args.num_rounds"
                train_task_name  = "workflows.sag_pt.workflow.args.train_task_name}"
                train_timeout    = "workflows.sag_pt.workflow.args.train_timeout}"
                model_path       = "workflows.sag_pt.components.persistor.args.model.path"
                model_metrics    = workflows.sag_pt.components.model_selector.args.key_metric"
                script           = ""
                app_config       = ""
        }
        sag_pt.workflow {
                id = "scatter_and_gather",
                name = "ScatterAndGather"
                args {
                    min_clients = 1,
                    num_rounds = 1,
                    start_round =  0,
                    wait_time_after_min_received = 0,
                    aggregator_id = "aggregator",
                    persistor_id = "persistor",
                    shareable_generator_id =  "shareable_generator",
                    train_task_name = "train",
                    train_timeout  =  0
                }
        }
        sag_pt.components {
                persistor {
                  id =  "persistor",
                  name =  "PTFileModelPersistor",
                  args.model{
                    path = "net.Net" # note you need define your own model class "here is called. net.Net in net.py file
                  }
                }

                shareable_generator {
                  id =  "shareable_generator",
                  path =  "nvflare.app_common.shareablegenerators.full_model_shareable_generator.FullModelShareableGenerator",
                  args {}
                }
                aggregator {
                    id = "aggregator",
                    path = "nvflare.app_common.aggregators.intime_accumulate_model_aggregator.InTimeAccumulateWeightedAggregator",
                    args.expected_data_kind = "WEIGHTS",
                }
                model_selector {
                    id = "model_selector"
                    name = "IntimeModelSelector"
                    args.key_metric =  "accuracy"
                }
        }

        sag_pt.executors {
                PTFilePipeLauncherExecutor {
                    default = true
                    executor {
                        tasks = ["train"]
                        executor {
                            name = "PTFilePipeLauncherExecutor"
                            args {
                                launcher_id="launcher"
                            }
                        }
                    }
                    components {
                        launcher {
                          id = "launcher"
                          name = "SubprocessLauncher"
                          heartbeat_timeout = 60
                          args.script = "python custom/{script} {app_config} " # you need to modify the code path to fit your needs.
                        }
                    }
                }
        }

    }
}