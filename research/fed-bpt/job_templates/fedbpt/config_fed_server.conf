{
  # version of the configuration
  format_version = 2

  # task data filter: if filters are provided, the filter will filter the data flow out of server to client.
  task_data_filters =[]

  # task result filter: if filters are provided, the filter will filter the result flow out of client to server.
  task_result_filters = []

  # This assumes that there will be a "net.py" file with class name "Net".
  # If your model code is not in "net.py" and class name is not "Net", please modify here
  # model_class_path = "net.Net"

  # workflows: Array of workflows the control the Federated Learning workflow lifecycle.
  # One can specify multiple workflows. The NVFLARE will run them in the order specified.
  workflows = [
      {
        # 1st workflow"
        id = "global_es"

        # name = GlobalES, path is the class path of the GlobalES controller.
        path = "global_es.GlobalES"
        args {
            # argument of the GlobalES class.
            # min number of clients required for GlobalES controller to move to the next round
            # during the workflow cycle. The controller will wait until the min_clients returned from clients
            # before move to the next step.
            min_clients = 10

            # number of global round of the training.
            num_rounds = 200

            # seed for CMA-ES algorithm
            seed = 42
        }
      }
  ]

  # List of components used in the server side workflow.
  components = [
    {
      id = "receiver"
      path = "nvflare.app_opt.tracking.tb.tb_receiver.TBAnalyticsReceiver"
      args.events = ["fed.analytix_log_stats"]
    },
    {
      # we use this component so the client api `flare.init()` can get required information
      id = "register_decomposer"
      path = "decomposer_widget.RegisterDecomposer"
      args {}
    }
  ]

}
